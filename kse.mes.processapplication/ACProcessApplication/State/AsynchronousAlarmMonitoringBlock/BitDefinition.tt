<#@ template language="C#" debug="false" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Manager.ttinclude"#>
<#@ include file="Capitalize.ttinclude"#>
<#@ output extension=".txt" #>

<#

var manager = Manager.Create(Host, GenerationEnvironment);
const string inputFolder = @"BitDefinition";
DirectoryInfo dirInfo = new DirectoryInfo(Host.ResolvePath(inputFolder));
var files = dirInfo.GetFiles("*.csv");
foreach(var file in files)
{
	// Process csv content
	Dictionary<int, string> readedResult = new Dictionary<int, string>();
	List<string> bitProperties = new List<string>(){};
	List<string> entityProperties = new List<string>(){};
	for (int i = 0; i < 16; i++)
	{
		bitProperties.Add("");
	}
	string inputValue = File.ReadAllText(file.FullName);
	using(StringReader reader = new StringReader(inputValue))
	{
		string line;
		while ((line = reader.ReadLine()) != null)
		{
			string[] arr = line.Split(';');
			readedResult.Add(int.Parse(arr[1].Trim()), arr[0].Trim());
		}
	}

	// [ACPropertyEntity(100, "Bit08", "en{'Alarm frequency controller X'}de{'Alarm frequency controller X'}")]
	string propertyEntityTemplate = @"[ACPropertyEntity({0}, ""{1}"", ""en{{'{2}'}}de{{'{2}'}}"")]";
	string propertyTemplate  
=@"public bool Bit{0}_{1}
		{{
			get {{ return Bit{0}; }}
			set {{ Bit{0} = value; }}
		}}";
	string emptyStringReplacement = @"Not used";
	int propertyEntityID = 100;
	for (int i = 0; i < 8; i++)
	{
		string name = readedResult[i + 1];
		if(string.IsNullOrEmpty(name))
			name = emptyStringReplacement;
		entityProperties.Add(string.Format(propertyEntityTemplate, propertyEntityID, string.Format("Bit{0}",  (i+8).ToString("00")), name));
	
		bitProperties[i + 8] = string.Format(propertyTemplate, (i + 8).ToString("00"), Capitalize.Work(name));
	
		propertyEntityID++;
	}

	for (int i = 8; i < 16; i++)
	{
		string name = readedResult[i + 1];
		if(string.IsNullOrEmpty(name))
			name = emptyStringReplacement;
		entityProperties.Add(string.Format(propertyEntityTemplate, propertyEntityID, string.Format("Bit{0}",  (i-8).ToString("00")), name));
	
		bitProperties[i - 8] = string.Format(propertyTemplate, (i - 8).ToString("00"), Capitalize.Work(name));
	
		propertyEntityID++;
	}


    string fileName = file.Name;
	fileName = fileName.Replace(".csv", "");
	
	
	manager.StartNewFile(fileName + ".cs"); 
#>
using gip.core.autocomponent;
using gip.core.datamodel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace kse.mes.processapplication
{
	[DataContract]
	[ACSerializeableInfo]
	[ACClassInfo("VarioAutomation", "en{'AlarmPositioning'}de{'AlarmPositioning'}", Global.ACKinds.TACClass, Global.ACStorableTypes.NotStorable, true, false)]
	<# foreach(string property in entityProperties){#>
<#=property#>
	<# } #>
// @aagincic: AutoGenerated file form <#=fileName#>.csv definition
    public class <#=fileName#> :  BitAccessForInt16
	{
		#region c'tors
        public <#=fileName#>()
        {
        }

        public <#=fileName#>(IACType acValueType)
            : base(acValueType)
        {
        }
        #endregion

		#region Customized Bits

		<# foreach(string property in bitProperties){#> 
		<#=property#>
		<# } #>

		#endregion
		
	}
}
<#
	manager.EndBlock();
}
manager.Process(true);
#>
Author:	@aagincic
Date:	2016-04-07
Name:	Generator BitAccessForInt16 enumerations from CSV alfra doc def